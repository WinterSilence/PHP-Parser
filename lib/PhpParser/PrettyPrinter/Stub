<?php declare(strict_types=1);

namespace PhpParser\PrettyPrinter;

use PhpParser\Node\Stmt;
use PhpParser\Node\FunctionLike;

/**
 * PHP stub printer.
 */
class Stub extends Standard
{
    /**
     * @return string
     */
    protected function pStmt_ClassConst(Stmt\ClassConst $node)
    {
        // Omit private class constant
        if ($node->isPrivate()) {
            return '';
        }

        return parent::pStmt_ClassConst($node);
    }

    /**
     * @return string
     */
    protected function pStmt_Property(Stmt\Property $node)
    {
        // Omit private property
        if ($node->isPrivate()) {
            return '';
        }

        return parent::pStmt_Property($node);
    }

    /**
     * @return string
     */
    protected function pStmt_ClassMethod(Stmt\ClassMethod $node)
    {
        // Omit private method
        if ($node->isPrivate()) {
            return '';
        }

        return $this->pAttrGroups($node->attrGroups)
             . $this->pModifiers($node->flags)
             . 'function ' . ($node->byRef ? '&' : '') . $node->name
             . '(' . $this->pMaybeMultiline($node->params, $this->phpVersion->supportsTrailingCommaInParamList()) . ')'
             . (null !== $node->returnType ? ': ' . $this->p($node->returnType) : '')
             // Omit method body
             . (null !== $node->stmts ? ' {}' : ';');
    }

    /**
     * @return string
     */
    protected function pStmt_Function(Stmt\Function_ $node)
    {
        return $this->pAttrGroups($node->attrGroups)
             . 'function ' . ($node->byRef ? '&' : '') . $node->name
             . '(' . $this->pMaybeMultiline($node->params, $this->phpVersion->supportsTrailingCommaInParamList()) . ')'
             . (null !== $node->returnType ? ': ' . $this->p($node->returnType) : '')
             // Omit function body
             . ' {}';
    }

    /**
     * @inheritDoc
     */
    protected function pComments(array $comments)
    {
        // Get last comment
        return \str_replace(["\r\n", "\n"], $this->nl, end($comments)->getReformattedText());
    }

    /**
     * @inheritDoc
     */
    protected function pStmts(array $nodes, bool $indent = true)
    {
        if ($indent) {
            $this->indent();
        }

        $result = '';
        foreach ($nodes as $node) {
            $pNode = $this->p($node);
            if ($pNode === '') {
                continue;
            }
            if (
                $node instanceof Stmt\Property
                || $node instanceof Stmt\ClassLike
                || $node instanceof FunctionLike
            ) {
                $docComment = $node->getDocComment();
                if ($docComment !== null) {
                    $result .= $this->nl . $this->pComments([$docComment]);
                }
            }
            if ($node instanceof Stmt\Nop) {
                continue;
            }
            $result .= $this->nl . $pNode;
        }

        if ($indent) {
            $this->outdent();
        }

        return $result;
    }
}
